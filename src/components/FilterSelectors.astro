---
import Select from "@/components/ui/select/Select.astro";
import SelectItem from "@/components/ui/select/SelectItem.astro";

const POSITION_OPTIONS = [
  { value: "all", label: "Todas las posiciones" },
  { value: "front", label: "Frontend" },
  { value: "full", label: "Fullstack" },
  { value: "back", label: "Backend" },
  { value: "mobile", label: "Mobile" },
  { value: "devops", label: "DevOps" },
  { value: "qa", label: "QA" }
];

const MODALITY_OPTIONS = [
  { value: "all", label: "Todas las modalidades" },
  { value: "remoto", label: "Remoto" },
  { value: "híbrido", label: "Híbrido" },
  { value: "presencial", label: "Presencial" },
];
---

<div class="flex gap-x-4">
  <Select id="title">
    {
      POSITION_OPTIONS.map((option) => (
        <SelectItem value={option.value}>{option.label}</SelectItem>
      ))
    }
  </Select>
  <Select id="modality" class="w-[200px]">
    {
      MODALITY_OPTIONS.map((m) => (
        <SelectItem value={m.value}>{m.label}</SelectItem>
      ))
    }
  </Select>
</div>
<script>
  import { centerRectOnScreen, generateTableRow } from "@/lib/utils.ts";
  import type { Job } from "@/types";

  const $select = document.querySelectorAll("select");

  let state: Record<string, string | null> = {
    title: null,
    modality: null,
  };

  async function renderTableRow({
    title,
    modality,
  }: Record<string, string | null>) {
    let url = "";

    if (title && modality) {
      url = `/api/jobs.json?title=${title}&modality=${modality}`;
    } else if (title) {
      url = `/api/jobs.json?title=${title}`;
    } else if (modality) {
      url = `/api/jobs.json?modality=${modality}`;
    } else {
      url = "/api/jobs.json";
    }

    const res = await fetch(url);
    const jobs = (await res.json()) as Job[];

    const htmlTableRow = jobs.map((job) => generateTableRow(job)).join("");

    const $tbody = document.querySelector("tbody") as HTMLTableSectionElement;

    htmlTableRow
      ? ($tbody.innerHTML = htmlTableRow)
      : ($tbody.innerHTML =
          "<tr><td class='p-4 align-middle'>No hay resultados</td></tr>");
  }

  $select.forEach((select) => {
    select.addEventListener("change", async ({ target }) => {
      const { id, value } = target as HTMLSelectElement;
      const key = id as keyof Job;

      // update state
      state[key] = value === "all" ? null : value;

      // render html table filtered by state
      await renderTableRow(state);

      // reload event listener for each new TableRow generated
      const $tr = document.querySelectorAll("tr[data-href]");
      $tr?.forEach((tr) => {
        tr.addEventListener("click", (e) => {
          const href = (e.currentTarget as HTMLElement)?.dataset.href;
          const { width, height, left, top } = centerRectOnScreen(750, 800);

          window.open(
            `${href}`,
            "popup",
            `width=${width},height=${height},top=${top},left=${left}`,
          );
        });
      });
    });
  });
</script>
